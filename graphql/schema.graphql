"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

scalar Upload
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

#import enum.graphql
#import type.graphql
#import input.graphql

type Query {
    # User
    me: User @auth
    users: [User!]! @paginate(type: CONNECTION)
    user(id: ID! @eq): User @find
    userByUsername(username: String! @eq): User @first
    # Product
    products(
        user_id: ID @eq
        name: String @where(operator: "like")
    ): [Product!]! @paginate(type: CONNECTION)
    product(id: ID @eq): Product @find

    getTax(price: Int!): TaxResult!
}

type TaxResult {
    tax: Float!
}

input PictureAssignInput {
    id: ID!
}

type Mutation {
    # User
    createUser(input: createUser! @spread): User @create @can(ability: "create")
    updateUser(id: ID! @eq, input: updateUser! @spread): User
        @update
        @can(ability: "update", find: "id")
    deleteUser(id: ID!): User @delete @can(ability: "delete")
    update_user_picture(
        id: ID!
        profilepicture: PictureAssignInput
        banner: PictureAssignInput
    ): User
    # Product
    createProduct(input: createProduct! @spread): Product
        @create
        @inject(context: "user.id", name: "user_id")
    updateProduct(id: ID!, input: updateProduct! @spread): Product @update
    deleteProduct(id: ID!): Product @delete

    update_product_picture(id: ID!, cover: PictureAssignInput): Product
    # Purchase
    createPurchase(input: createPurchase! @spread): PurchaseData

    login(input: login! @spread): LoginOutput

    upload_picture(file: Upload! @spread): Picture


    #admin
    send_invitation(email: String!): InvitationOutput

}


type InvitationOutput {
    status: Boolean!
    message: String
}

type PurchaseData {
    message: String
    success: Boolean!
    purchase: Purchase
    transaction: Transaction
    # payment: TripayTransactionResponse
}

type LoginOutput {
    user: User
    token: String
    message: String
}

input login {
    email: String!
    password: String!
}
