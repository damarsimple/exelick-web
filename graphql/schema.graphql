"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

scalar Upload
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Upload")

#import enum.graphql
#import type.graphql
#import input.graphql

type Query {
    # User
    allUsers: [User!]! @all
    users: [User!]!
        @orderBy(column: "created_at", direction: DESC)
        @paginate(type: CONNECTION)
    user(id: ID! @eq): User @find
    userByUsername(username: String! @eq): User @first
    userByStreamKey(stream_key: String! @eq): User @first
    # Product
    products(
        user_id: ID! @eq
        name: String @where(operator: "like")
    ): [Product!]! @paginate(type: CONNECTION)
    product(id: ID @eq): Product @find

    getTax(price: Int!): TaxResult!

    query_invitation(username: String!): User
}

type DashboardData {
    total_product: Int!
    analytics_sentiment: Float!
    transaction_total: Float!
    transaction_total_month: Float!
    purchase_total: Int!
    purchase_total_month: Int!
}
extend type Query @guard {
    #user
    me: User @auth

    get_my_dashboard_data: DashboardData

    #transactions
    transactions(user_id: ID! @eq): [Transaction!]!
        @can(ability: "viewAny", injectArgs: true)
        @orderBy(column: "created_at", direction: DESC)
        @paginate(type: CONNECTION)
}

type TaxResult {
    tax: Float!
}

input PictureAssignInput {
    id: ID!
}

input UserVariableInput {
    name: String!
    value: String!
}

type Mutation {
    # Purchase
    createPurchase(input: createPurchase! @spread): PurchaseData

    login(input: login! @spread): LoginOutput

    upload_picture(file: Upload! @spread): Picture

    activate_invitation(uuid: String!, input: updateUser! @spread): User
}

extend type Mutation @guard {
    #admin
    send_invitation(email: String!): InvitationOutput

    # User
    createUser(input: createUser! @spread): User @create @can(ability: "create")
    updateUser(id: ID! @eq, input: updateUser! @spread): User
        @update
        @can(ability: "update", find: "id")
    deleteUser(id: ID!): User @delete @can(ability: "delete")
    update_user_picture(
        id: ID!
        profilepicture: PictureAssignInput
        banner: PictureAssignInput
    ): User
    update_user_custom(id: ID!, variables: [UserVariableInput!]!): User
    # Product
    createProduct(input: createProduct! @spread): Product
        @create
        @inject(context: "user.id", name: "user_id")
    updateProduct(id: ID!, input: updateProduct! @spread): Product @update
    deleteProduct(id: ID!): Product @delete

    update_product_picture(id: ID!, cover: PictureAssignInput): Product

    #admin
    send_invitation(email: String!): InvitationOutput

    test_donation(stream_key: String!): GenericOutput

    create_update_overlay(
        theme: NotificationTheme
        type: OverlayType!
        message: String
        color: String
        duration: Int
        picture_id: ID
        audio_id: ID
    ): Overlay
}

type GenericOutput {
    status: Boolean!
    message: String
}

type Subscription {
    userUpdated(id: ID! @eq): User
}
